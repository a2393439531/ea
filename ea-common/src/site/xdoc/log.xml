<?xml version="1.0" encoding="GBK"?>
<document>
<br/><b>.日志-策略</b>
<fieldset>
<legend>本项目使用Slf4j+logback解决方案 </legend>
<pre>
Slf4j 和logback由log4j作者Ceki开发，和commons-loging 应该有一样的初衷,避免和具体的日志方案直接耦合。
logback由log4j作者Ceki开发，逐步取代log4j.会根据classpath中存在下面哪一个Jar来决定具体的日志实现库.
可以方便地替换log4j或者JUL(java.util.logging )hibernate等项目已经采用了slf4j。logback的整体性能
比log4j也较佳. 
特点：
*.根据日志信息的内容写入不同的文件、数据库、Email、Socket和队列
  (无需在代码里进行区分，日志展示系统直接读取日志文件，将各种业务设置特殊的关键字)
      场景：利用这个可以轻松实现监控，发送到各种客户端。
      判断一个方法，执行时间，超过多长时间，发送email警告，都比较方便。
      日志系统是实时更新的，可以开发管理界面都日志配置文件进行email配置
*.通过spring的apo，场景（压力测试时）：将service层和dao层的方法信息和参数情况
      还有方法执行时间打印出来 （参考http://yuri-liuyu.iteye.com/blog/948516）           
    
*.配置文件默认加载顺序
   logback-test.xml ->logback.xml ->BasicConfigurator(基本的直接打印在屏幕)
      这里用默认的测试logback-test.xml文件，方便开发人员编写代码
      还可以指定属性（这种方式也是适合开发人员做自己的配置文件处理）
  java -Dlogback.configurationFile=/path/to/config.xml chapter3.MyApp1
     也可直接代码里指定
  LoggerContext lc = (LoggerContext) LoggerFactory.getILoggerFactory();
	    try {
	      JoranConfigurator configurator = new JoranConfigurator();
	      configurator.setContext(lc);
	      // the context was probably already configured by default configuration rules
	      lc.reset(); 
	      configurator.doConfigure(args[0]);
	    } catch (JoranException je) {
	       je.printStackTrace();
	    }
	    StatusPrinter.printInCaseOfErrorsOrWarnings(lc);
	    logger.info("Entering application.");


*.支持OSGI环境
*.分布式：区分不同客户端日志记录，可以为每个客户端建立独立logger,但数量多，
 	增加管理开销建议 为每个请求加唯一戳stamp,映射诊断环境MDContcxt
*.其它
    logback-audit 日志审计，传统的日志是为了调试和技术支持，而审计是为了商业意义
    logback-access 集成web服务器的日志系统
 
 注意：
  logback.xml是默认放在ueaac-base-common工程下，是最基层的基础类，其它工程，也
  可以设置该文件，会覆盖该工程的配置
------------------------------------------------------------------------------
总结：日志分2类:  
1.调试日志 (classical logs 传统日志) 
2. 业务日志（audit logs 审计日志
    这些信息是给用户看的,例如：用户 Alice 完成 a 1000 USD 交易  和  Bob  在2011-09-02 18:33:33

可以研究的主题：
1.学习扩展append，
2.复用audit的表和配置方式，还有通知方式，在UEAAC中利用audit方式插入日志，
3.复用配置文件的方式



SLF4j+Log4j 与 JCL+Log4J 的使用方式差不多，主要差
异就在 SLF4J 用 jar 来告知用哪种日志实现，而 JCL 是通过配置文件来获得该选择哪个日志实现
为什么会兴起 SLF4J，看看我们原来哪一个框架中，大的如 SSH 三雄(Spring、Struts、Hibernate)，
还有 WAS 应用服务器，小的就不计其数以前用的通用日志框架都清一色的 Jakarta Commons Logging(JCL)，
日志实现会选用 Log4j，为何现在 Hibernate、Tapesty、DbUnit、Jetty V6 等纷纷变节，
都采用了 SLF4J 了呢？SLF4J 与 JCL 相比，定然是有其可表之处。而其中 SLF4J 受类加载器的影响较小，
不易产生内存溢出的问题，性能得到了改善，更主要是顺应了潮流的发展--可方便部署到 OSGI 环境中


其实slf4j原理很简单，他只提供一个核心slf4j api(就是slf4j-api.jar包)，这个包只
有日志的接口，并没有实现，所以如果要使用就得再给它提供一个实现了些接口的日志包
，比如：log4j,common logging,jdk log日志实现包等，但是这些日志实现又不能通过
接口直接调用，实现上他们根本就和slf4j-api不一致，因此slf4j又增加了一层来转换
各日志实现包的使用，当然slf4j-simple除外。其结构如下： 

slf4j-api(接口层) 
   | 
各日志实现包的连接层( slf4j-jdk14, slf4j-log4j) 
   | 
各日志实现包 
在这里还需要注意的是，连接层的jar包和实现的jar的版本要一致。
附jar说明：
slf4j-api-1.6.1.jar         -->  slf4j核心接口包
slf4j-simple-1.6.1.jar      -->  slf4j Simple Logger日志实现包
slf4j-nop-1.6.1.jar         -->
slf4j-migrator-1.6.1.jar    -->
slf4j-log4j12-1.6.1.jar     -->  slf4j调用log4j的实现包
slf4j-jdk14-1.6.1.jar       -->  slf4j调用jdk java.util.logging的实现包
slf4j-jcl-1.6.1.jar         -->  Jakarta Commons Logging
slf4j-ext-1.6.1.jar         -->
log4j-over-slf4j-1.6.1.jar  -->
jul-to-slf4j-1.6.1.jar      -->
jcl-over-slf4j-1.6.1.jar    -->

slf4j+log4j组合使用模式：
1. slf4j-api-1.5.11.jar 
2. slf4j-log4j12-1.5.11.jar 
3. log4j-1.2.15.jar 
4. log4j.properties(也可以是 log4j.xml，本例中用 log4j.propertes) 

JCL+Log4J组合使用模式：
1. commons-logging-1.1.jar
2. log4j-1.2.15.jar
3. log4j.properties
上面的对比来看，
</pre>
</fieldset>





<fieldset>
<legend>其它日志方案(淘汰)</legend>
<br/><b>jdk jul日志接口 </b>
<pre> 
java.util.logging :Java日志工具的类和接口.
参考：com.sunrise.ueaac.base.common.log.jdk.util.logging 
<a target="_blank" href="jdklog.html">配置</a> 
</pre>   
<br/><b>JCL - Commons-logging+log4j </b>
<pre> 
apache最早提供Commons-logging日志处理组合
</pre>         
</fieldset>


</document>
