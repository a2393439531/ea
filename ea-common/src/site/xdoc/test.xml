<?xml version="1.0" encoding="GBK"?>
<document>
<br/><b>.测试-策略</b>

<fieldset>
<legend>JUNIT的使用方法 </legend>
<pre>
常见场景1:多个测试案例，根据需要集中在一起运行
-----------------------------
	junit3的处理：
	重载suite()方法，实现自定义的测试过程,可以自己定义顺序；
		public static Test suite() {
			TestSuite suite = new TestSuite();
			//suite.addTest(new AppTest("testApp2"));
			suite.addTest(new AppTest("testApp1")); 
			return suite;
		}
	缺点是运行整个类时，不会运行testApp2，可以考虑自己写一个类，用来加载testApp2，
	但该类不要上传到SVN.持续集成是根据类的suite()方法来依次执行。

	或者2：在example目录写，用主程序编写，非测试案例

	
常见场景2：只运行某些测试案例，持续集成中不运行某些测试案例，但代码里面保留
测试方法的运行时间测试
---------------------------------------------------------------
	junit4：排序等问题（junt3的类不能使用，public class Junit3 extends TestCase）
		@Ignore: 被忽略的测试方法   //JUnit4 Annotation
		时间和异常测试：		
		@Ignore
		@Test(expected=java.lang.ArithmeticException.class, timeout=100)
		public void testDivide() {
			int z = new T().divide(8, 0);
		}
	
	junit的标签	
		1.	@Test: 测试方法
		a)	(expected=XXException.class)
		b)	(timeout=xxx)
		2.	@Ignore: 被忽略的测试方法
		3.	@Before: 每一个测试方法之前运行
		4.	@After: 每一个测试方法之后运行
		5.	@BeforeClass: 所有测试开始之前运行
		6.	@AfterClass: 所有测试结束之后运行


		使用标签最终是为了帮助开发人员提取注释信息，然后根据不同需求做进一步处理
		(可以参考sapmple com.lingli.jdk)，但是获取注释信息之后如何处理确很值得
		推敲，我们可以用他们来做一些语法检查，
		文件相关性检查，进行各种统计等等	

常见场景3:初始化类运行很长时间的解决办法
----------------------------------
情况1：调试阶段(见下图，程序员只要运行一次，可以不断运行测试方法，进入调试状态)：
情况2：系统集成阶段（系统集成时，每个方法也只需要运行1次）:
    ApplicationContext applicationContext;
	protected void setUp() throws Exception {
		if(applicationContext==null){
			.....耗时的初始化
		}
	}
</pre>
<img src="img/junit.png" ></img>
</fieldset>

<fieldset>
<legend>断言使用assertThat 和hamcrest的匹配方法</legend>
<pre>
-------------------------------------------------------------------------------
hamcrest 一个匹配规则库，在测试中比较有用,场景有：测试框架，模拟库，UI验证规则
1.测试案例最麻烦的是，要保证测试详细，又要保证容易修改，更hamcrest自然的语法验证可以平衡
让测试案例一目了然
2.自己写匹配规则
使用方法
http://code.google.com/p/hamcrest/wiki/Tutorial
hamcrest-library-1.2.jar
hamcrest-core-1.2.jar
 注意：引入方式是静态引入，eclipse不能自动判断引入，因为直接做为方法引入了进来，没有类名
		import static org.hamcrest.MatcherAssert.assertThat;
		import static org.hamcrest.Matchers.containsString;
		import static org.hamcrest.Matchers.is;
		import static org.hamcrest.Matchers.not;
 
       
		a)范围	
		assertThat( n, allOf( greaterThan(1), lessThan(15) ) );
		assertThat( n, anyOf( greaterThan(16), lessThan(8) ) );
		assertThat( n, anything() );
		assertThat( str, is( "bjsxt" ) );
		assertThat( str, not( "bjxxt" ) );

		b)字符串
		assertThat( str, containsString( "bjsxt" ) );
		assertThat( str, endsWith("bjsxt" ) ); 
		assertThat( str, startsWith( "bjsxt" ) ); 
		assertThat( n, equalTo( nExpected ) ); 
		assertThat( str, equalToIgnoringCase( "bjsxt" ) ); 
		assertThat( str, equalToIgnoringWhiteSpace( "bjsxt" ) );

		c)数字	
		assertThat( d, closeTo( 3.0, 0.3 ) );
		assertThat( d, greaterThan(3.0) );
		assertThat( d, lessThan (10.0) );
		assertThat( d, greaterThanOrEqualTo (5.0) );
		assertThat( d, lessThanOrEqualTo (16.0) );

		d)collect
		assertThat( map, hasEntry( "bjsxt", "bjsxt" ) );
		assertThat( iterable, hasItem ( "bjsxt" ) );
		assertThat( map, hasKey ( "bjsxt" ) );
		assertThat( map, hasValue ( "bjsxt" ) );
</pre>

</fieldset>



</document>
